/*
 * Copyright (c) 2010 - 2015 Ushahidi Inc
 * All rights reserved
 * Contact: team@ushahidi.com
 * Website: http://www.ushahidi.com
 * GNU Lesser General Public License Usage
 * This file may be used under the terms of the GNU Lesser
 * General Public License version 3 as published by the Free Software
 * Foundation and appearing in the file LICENSE.LGPL included in the
 * packaging of this file. Please review the following information to
 * ensure the GNU Lesser General Public License version 3 requirements
 * will be met: http://www.gnu.org/licenses/lgpl.html.
 *
 * If you have questions regarding the use of this file, please contact
 * Ushahidi developers at team@ushahidi.com.
 */

import org.ajoberstar.gradle.git.release.opinion.Strategies
import org.ajoberstar.grgit.Grgit

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: 'com.github.triplet.play'

def isTravis = "true".equals(System.getenv("TRAVIS"))

def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

def getGooglePlaystoreServiceAccountEmail() {
    return project.hasProperty('gPlaystoreServiceAccountEmailAddress') ?
            gPlaystoreServiceAccountEmailAddress : ''
}

def getGooglePlaystoreServicepk12File() {
    // Set to home directory if property not set because play plugin doesn't allow empty or null
    // value for the pk file
    return project.hasProperty('gPlaystorePKFile') ? gPlaystorePKFile : '~/'
}

def trackProperty() {
    return project.hasProperty('uploadTrack') ? uploadTrack : 'alpha'
}

def readWhatsNewFile(filename) {
    File file = new File('smssync/src/main/play/en-US/' + filename);
    return file.exists() ? file.text + '\n\n' :
            new File('smssync/src/main/play/en-US/whatsnew').text;
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.0"

    sourceSets {

        defaultConfig {
            testApplicationId "org.addhen.smssync.tests"
            applicationId "org.addhen.smssync"
            buildConfigField "String", "GOOGLE_FORM_URL",
                    project.hasProperty('googleDocsForm') ? googleDocsForm : "\"\""
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {

        releaseSign
    }

    buildTypes {

        release {
            if (project.hasProperty('googleAnalyticsCode')) {
                resValue "string", "ga_trackingId", "${googleAnalyticsCode}"
            } else {
                resValue "string", "ga_trackingId", ""
            }

            minifyEnabled false
            shrinkResources false
            // Library specific proguard files
            proguardFile 'proguard-gson.pro'
            proguardFile 'proguard-square-okio.pro'
            proguardFile 'proguard-square-okhttp.pro'
            proguardFile 'proguard-square-otto.pro'
            proguardFile 'proguard-google-analytics.pro'

            // Default proguard files
            proguardFile 'proguard-project.pro'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.releaseSign
        }

        debug {
            if (project.hasProperty('googleAnalyticsCode')) {
                resValue "string", "ga_trackingId", "${googleAnalyticsCode}"
            } else {
                resValue "string", "ga_trackingId", ""
            }
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
        }
    }

    defaultConfig {
        versionCode 36
        versionName "2.8.3"
        minSdkVersion 8
        targetSdkVersion 22
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        def publicKey = project.hasProperty('inAppPurchasePubKey') ? inAppPurchasePubKey :
                'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAogSL6I/lnQ0bVEEwttOu8CmrZvZzkTrFcsLiHjeb6Sw01+i8nTNW70QsTe1U2Hg4ELv3Hrm0Vt5gyQL2r9V4h8IWhbGNlHPAWJFP/dUgbwYFBUsJ4SSOS4N2kN9FER0mWwZ90boulNaHd8g8AQkwaBAzsNL5w+uij4hfZ9AsAO/rdhqXkAQeV6ykVgW0Q9qoWTcPg0ly7lOtxMmnvPFnrPXTt/SyoZEmNE5j02sh0eDdyGR5hEc16ZcMM2tvndRomfi+aYeswguZf3V+J+fAcXiBiX4Q81356g+nFJfMUxu8D7o0ZDPSS2u4FW79QhRjWzijJ/4EIw4TQ1jtKBapgwIDAQAB';
        if (!project.hasProperty('inAppPurchasePubKey')) {
            println 'Missing inAppPurchasePubKey. Using the default from SMSsync project'
        }
        buildConfigField "String", "PUBLIC_LICENSE_KEY", '"' + publicKey + '"'
    }

    lintOptions {
        abortOnError false
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def newName = outputFile.name.replace(outputFile.name,
                        "smssync-v" + defaultConfig.versionName + "-" +
                                variant.buildType.name.toUpperCase() +
                                ".apk");

                output.outputFile = file("$project.buildDir/apk/" + newName);
                if (output.zipAlign) {
                    output.zipAlign.outputFile =
                            file("$project.buildDir/apk/" + newName.replace("-unaligned", ""));
                }
            }
        }
    }

    flavorDimensions "analytics"
    productFlavors {

        withAnalytics {
            dimension "analytics"
        }

        noAnalytics {
            dimension "analytics"
        }
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

release {
    grgit = Grgit.open(dir: '.')

    def tagMessage = readWhatsNewFile("whatsnew-${trackProperty()}");

    versionStrategy Strategies.PRE_RELEASE_ALPHA_BETA

    android.defaultConfig.versionName = project.version.toString()

    tagStrategy {
        generateMessage = { version -> "\n\nRelease of $version.version\n$tagMessage" }
    }
}

play {
    serviceAccountEmail = getGooglePlaystoreServiceAccountEmail()
    pk12File = file(getGooglePlaystoreServicepk12File())
    uploadImages = true
    track = trackProperty()
}

if (project.hasProperty('releaseKeyStore') &&
        project.hasProperty('releaseKeyPassword') &&
        project.hasProperty('releaseKeyStorePassword') &&
        project.hasProperty('releaseKeyAlias')) {
    android.signingConfigs.releaseSign.keyAlias = releaseKeyAlias
    android.signingConfigs.releaseSign.storeFile = file(releaseKeyStore)
    android.signingConfigs.releaseSign.storePassword = releaseKeyStorePassword
    android.signingConfigs.releaseSign.keyPassword = releaseKeyPassword
} else {
    android.signingConfigs.releaseSign.keyAlias ""
    android.signingConfigs.releaseSign.storeFile null
    android.signingConfigs.releaseSign.storePassword ""
    android.signingConfigs.releaseSign.keyPassword ""
}

tasks.release.dependsOn(['build', 'publishApkWithAnalyticsRelease'])

// Build and launch app from command line
task runApp(type: Exec, dependsOn: ['build', 'installWithAnalyticsDebug']) {
    //Linux command to launch the MainActivity when debug app is installed
    commandLine 'adb', 'shell', 'am', 'start', '-n',
            'org.addhen.smssync.debug/org.addhen.smssync.activities.MainActivity'
}


dependencies {
    compile project(':libraries:pay-me')
    compile project(':libraries:survey-dialog')
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:22.0.0'
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'nl.qbusict:cupboard:2.1.1'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.commonsware.cwac:wakeful:1.0.+'
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.+'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.+'
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
}
